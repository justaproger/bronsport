# Generated by Django 4.2.18 on 2025-05-18 10:34

import bookings.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('facilities', '0009_amenity_name_ru_amenity_name_uz_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('transaction_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID Транзакции')),
                ('item_type_at_creation', models.CharField(choices=[('entry_fee', 'Оплата за вход'), ('slot_booking', 'Слотовое бронирование'), ('subscription', 'Подписка/Абонемент')], db_index=True, help_text='Тип заказа, для которого создавалась эта транзакция', max_length=20, verbose_name='Тип объекта при создании')),
                ('item_parameters', models.JSONField(help_text='Содержит facility_id, даты, слоты, дни, цену и т.д.', verbose_name='Параметры заказа на момент создания сессии Stripe')),
                ('amount', models.DecimalField(decimal_places=0, max_digits=14, verbose_name='Сумма (сум)')),
                ('stripe_session_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True, verbose_name='Stripe Checkout Session ID')),
                ('stripe_payment_intent_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True, verbose_name='Stripe Payment Intent ID')),
                ('stripe_charge_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Stripe Charge ID')),
                ('stripe_refund_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Stripe Refund ID')),
                ('status', models.CharField(choices=[('intent_created', 'Stripe сессия создана'), ('processing_stripe', 'Обработка Stripe'), ('succeeded_stripe', 'Успешно оплачено (Stripe)'), ('failed_stripe', 'Ошибка оплаты (Stripe)'), ('expired_stripe_session', 'Истекло время сессии Stripe'), ('order_creation_pending', 'Ожидание создания заказа'), ('order_created_successfully', 'Заказ успешно создан'), ('order_creation_failed', 'Ошибка создания заказа (после оплаты)'), ('refund_processing_pt', 'Обработка возврата'), ('refunded_pt', 'Возвращено')], db_index=True, default='intent_created', max_length=30, verbose_name='Статус транзакции')),
                ('expires_at', models.DateTimeField(default=bookings.models.default_payment_transaction_expires_at, verbose_name='Сессия Stripe истекает в')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_transactions', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Платежная транзакция',
                'verbose_name_plural': 'Платежные транзакции',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID Заказа')),
                ('order_code', models.CharField(blank=True, db_index=True, max_length=30, unique=True, verbose_name='Код заказа')),
                ('order_type', models.CharField(choices=[('entry_fee', 'Оплата за вход'), ('slot_booking', 'Слотовое бронирование'), ('subscription', 'Подписка/Абонемент')], db_index=True, max_length=20, verbose_name='Тип заказа')),
                ('status', models.CharField(choices=[('pending_payment', 'Ожидает оплаты'), ('confirmed', 'Подтвержден/Активен'), ('completed', 'Завершен/Использован'), ('cancelled_user', 'Отменен пользователем'), ('cancelled_admin', 'Отменен системой/администратором'), ('payment_failed', 'Ошибка оплаты'), ('expired_payment_intent', 'Истекло время ожидания оплаты'), ('refund_initiated', 'Возврат инициирован'), ('refunded', 'Возвращено')], db_index=True, default='pending_payment', max_length=30, verbose_name='Статус заказа')),
                ('total_price', models.DecimalField(decimal_places=0, max_digits=14, verbose_name='Итоговая стоимость (сум)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('booking_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='Дата бронирования/входа')),
                ('slots', models.JSONField(blank=True, help_text="Для SLOT_BOOKING: [{'start_time': 'HH:MM', 'end_time': 'HH:MM'}, ...]", null=True, verbose_name='Забронированные слоты')),
                ('subscription_start_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='Дата начала подписки')),
                ('subscription_end_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='Дата окончания подписки')),
                ('days_of_week', models.CharField(blank=True, help_text="Пн=0, Вс=6. Пример: '0,1,2'", max_length=15, null=True, verbose_name='Дни недели (для подписки)')),
                ('subscription_times', models.TextField(blank=True, help_text="HH:MM через запятую. Пример: '18:00,19:00'", null=True, verbose_name='Время начала слотов (для подписки)')),
                ('duration_per_slot_hours', models.PositiveSmallIntegerField(blank=True, default=1, null=True, verbose_name='Длительность 1 слота подписки (часы)')),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='facilities.facility', verbose_name='Спортивный объект')),
                ('payment_transaction_link', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_order', to='bookings.paymenttransaction', verbose_name='Связанная платежная транзакция')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['user', 'status'], name='bookings_pa_user_id_4ad337_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['status', 'expires_at'], name='bookings_pa_status_3b97e1_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['stripe_session_id'], name='bookings_pa_stripe__b79fc7_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['stripe_payment_intent_id'], name='bookings_pa_stripe__f9fc66_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user', 'status'], name='bookings_or_user_id_7112b2_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['facility', 'order_type', 'status'], name='bookings_or_facilit_c81429_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['order_code'], name='bookings_or_order_c_7f05f8_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['facility', 'booking_date', 'status'], name='bookings_or_facilit_358bec_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['facility', 'subscription_start_date', 'subscription_end_date', 'status'], name='bookings_or_facilit_b9ab75_idx'),
        ),
    ]
